#!/usr/bin/env python# Copyright (C) 2022 Irene Celestino## This program is free software: you can redistribute it and/or modify# it under the terms of the GNU General Public License as published by# the Free Software Foundation, either version 3 of the License, or# (at your option) any later version.## This program is distributed in the hope that it will be useful,# but WITHOUT ANY WARRANTY; without even the implied warranty of# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the# GNU General Public License for more details.## You should have received a copy of the GNU General Public License# along with this program.  If not, see <https://www.gnu.org/licenses/>."""First assignment for the CMEPDA course, 2022/23."""import argparseimport matplotlib.pyplot as pltimport numpy as npimport timedef process(file_path: str):    """    Creates a dictionary with frequency of letters in file_path and (optional) shows histogram and/or prints book statistics    """    print(f'Opening input file {file_path}...')    with open(file_path, 'r') as input_file:        text = input_file.read()    #print(text)    print('Reading of the file completed')    #Creo un dizionario per le lettere minuscole    dictionary1={'a':0}    for i in range(1, ord('z')-ord('a')+1):        dictionary1[chr(i+ord('a'))]=0    #Creo un dizionario per le lettere maiuscole    dictionary2={'A':0}    for i in range(1, ord('Z')-ord('A')+1):        dictionary2[chr(i+ord('A'))]=0#Creo un dizionario per le lettere senza distinzione di caps    dictionary={'a':0}    for i in range(1, ord('z')-ord('a')+1):        dictionary[chr(i+ord('a'))]=0        #statistiche del libro    n_spaces=0    n_newline=0    n_characters=len(text)    n_lines=0    #Conta numero occorrenza caratteri nell'apposito dizionario    for i in range(len(text)-1):        if ord(text[i]) >= ord('a') and  ord(text[i])<= ord('z'):            dictionary1[text[i]]+=1            dictionary[text[i]]+=1        elif (ord(text[i]) >= ord('A') and  ord(text[i])<= ord('Z')):            j=ord(text[i])-ord('A')+ord('a')            dictionary[chr(j)]+=1            dictionary2[text[i]]+=1        elif(ord(text[i])==32):            n_spaces+=1        elif(text[i]=='\n'):            n_lines+=1            if (text[i+1]!='\n'):                n_newline+=1      #Stampa dizionario    print("Number of occurrences for each letter: " , dictionary)            #Grafico istogramma    plt.figure(1)    plt.title('Histogram relative frequence of each letter in "Pride and Prejudice"')    plt.xlabel('Letter')    plt.ylabel('Number of occurrences')    plt.bar(dictionary.keys(), dictionary.values(), align='center', color='bisque', edgecolor ='darkorange')   #Comandi opzionali    show_histogram= input("\nShow histogram? [yes/no]: ")            print_stats=input("\nPrint Statistics? [yes/no]: ")       if print_stats=="yes":        print(f'\nBook Statistics: \n Number of characters = {n_characters} \n Number of words = {n_spaces+n_newline} \n Number of lines = {n_lines}')#Stampa tempo passato    tf=time.time()    print(f'Total elapsed time : {tf-t0} s')       if show_histogram=="yes":            plt.show()           if __name__ == '__main__':    t0=time.time()    parser = argparse.ArgumentParser(description='Print some book statistics')    parser.add_argument('infile', type=str, help='path to the input file')    #parser.add_argument('show_histogram', type=int, help='insert 1 to display a histogram of the frequences')    #parser.add_argument('print_stats', type=int, help='insert 1 to print general stats')    args = parser.parse_args()    process(args.infile)    